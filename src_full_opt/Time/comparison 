#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May  9 13:32:08 2023

@author: pdavid

THIS FILE IS TO TEST THE MODIFICATIONS MADE WHEN MODIFYING THE STUFF FOR THE SECOND EQUATION:
    - CLASS NODE
    - GET_I_1
    - self.Interpolate
    - mesh_1D.KernelPoint
    - mesh_3D.GetID
    - mesh_3D.Get8Closest
"""

import os 
path=os.path.dirname(__file__)
os.chdir(path)
path_src=os.path.join(path, '../')
os.chdir(path_src)
#%%
import numpy as np

import matplotlib.pyplot as plt
import scipy as sp
import scipy.sparse.linalg
import math

import pdb

import matplotlib.pylab as pylab
plt.style.use('default')
params = {'legend.fontsize': 'x-large',
          'figure.figsize': (10,10),
         'axes.labelsize': 'x-large',
         'axes.titlesize':'x-large',
         'xtick.labelsize':'x-large',
         'ytick.labelsize':'x-large', 
         'font.size': 24,
         'lines.linewidth': 2,
         'lines.markersize': 15}
pylab.rcParams.update(params)

from scipy.sparse.linalg import spsolve as dir_solve
from scipy.sparse.linalg import bicg

#%%

from hybrid_set_up_noboundaryFast_sec_eq import hybrid_set_up as opt

from neighbourhood import GetNeighbourhood, GetUncommon
from mesh import cart_mesh_3D
from mesh_1D import mesh_1D, KernelPointFast
from hybrid_set_up_noboundaryFast_sec_eq import GetInterfaceKernelsFast, AssemblyBArraysFast
from scipy.sparse import csc_matrix
from numba.typed import List

import importlib.machinery

loader = importlib.machinery.SourceFileLoader('hybrid_set_up_noboundaryFast', '../srcFast/hybrid_set_up_noboundaryFast.py')
non_opt = loader.load_module()

loader = importlib.machinery.SourceFileLoader('mesh', '../srcFast/mesh.py')
old_mesh_module = loader.load_module()
os.chdir(path_src)

#%%
from mesh_1D import KernelPointFast
BC_type=np.array(["Neumann", "Neumann", "Neumann","Neumann","Neumann","Neumann"])
BC_type=np.array(["Dirichlet", "Dirichlet","Neumann","Neumann", "Dirichlet","Dirichlet"])
BC_value=np.array([0,0,0,0,0,0])
L_vessel=240
cells_3D=5
n=2
L_3D=np.array([L_vessel, 3*L_vessel, L_vessel])

old_mesh=old_mesh_module.cart_mesh_3D(L_3D,cells_3D)

mesh=cart_mesh_3D(L_3D,cells_3D)

mesh.AssemblyBoundaryVectors()
old_mesh.AssemblyBoundaryVectors()


# - This is the validation of the 1D transport eq without reaction

D = 1
K=np.array([0.0001,1,0.0001])

U = np.array([2,2,2])/L_vessel
alpha=5
R_vessel=L_vessel/alpha
R_1D=np.zeros(3)+R_vessel

startVertex=np.array([0,1,2])
endVertex=np.array([1,2,3])
pos_vertex=np.array([[L_vessel/2, 0, L_vessel/2],
                     [L_vessel/2, L_vessel,L_vessel/2],
                     [L_vessel/2, 2*L_vessel, L_vessel/2],
                     [L_vessel/2, L_vessel*3,L_vessel/2]
                     ])

vertex_to_edge=[[0],[0,1], [1,2], [2]]
diameters=np.array([2*R_vessel, 2*R_vessel, 2*R_vessel])

cells_per_vessel=10
h=np.zeros(3)+L_vessel/cells_per_vessel

net=mesh_1D(startVertex, endVertex, vertex_to_edge ,pos_vertex, diameters, h,1)
net.U=U
net.D=D
net.PositionalArrays(mesh)

from mesh_1D_original_KernelPoint import mesh_1D

net_slow=mesh_1D(startVertex, endVertex, vertex_to_edge ,pos_vertex, diameters, h,1)
net_slow.U=U
net_slow.D=D
net_slow.PositionalArrays(mesh)

BCs_1D=np.array([[0,1],
                 [3,0]])
mesh.GetOrderedConnectivityMatrix()
old_mesh.GetOrderedConnectivityMatrix()

nmb_ordered_connect_matrix=List(mesh.ordered_connect_matrix)
prob_opt=opt(mesh, net, BC_type, BC_value,n,1, np.zeros(len(diameters))+K, BCs_1D)
prob_non_opt=non_opt.hybrid_set_up(old_mesh, net_slow, BC_type, BC_value,n,1, np.zeros(len(diameters))+K, BCs_1D)

x=np.array([L_vessel/2, L_vessel/2, L_vessel/2])
from hybrid_set_up_noboundaryFast_sec_eq import InterpolateFast
InterpolateFast(x, n, mesh.cells_x, mesh.cells_y, mesh.cells_z, mesh.h, prob_opt.GetBoundaryStatus(x), mesh.pos_cells,net.s_blocks, net.source_edge, net.tau, net.pos_s, net.h, net.R, D)


#%% - validation that the interpolation kernels are exactly the same



for c in range(100):
    x=np.random.random(3)*np.array([L_vessel, 3*L_vessel, L_vessel])
    print(x)
    new=InterpolateFast(x, n, mesh.cells_x, mesh.cells_y, mesh.cells_z, mesh.h, prob_opt.GetBoundaryStatus(x), mesh.pos_cells,
                    net.s_blocks, net.source_edge, net.tau, net.pos_s, net.h, net.R, D)
    
    old=prob_non_opt.Interpolate(x)
    
    for i in range(6):
        if np.sum(new[i]!=old[i]): pdb.set_trace()


    
#%%

KernelPointFast( x, net.uni_s_blocks, net.s_blocks, net.source_edge, net.tau, net.pos_s, net.h, net.R,D)

#%%
net_slow.KernelPoint(x, net.uni_s_blocks,'P',K, D)
#%%
# =============================================================================
# import pstats
# import cProfile
# if __name__ == '__main__':
#     # run the profiler on the code and save results to a file
#     cProfile.run('prob_opt.Assembly_BFast()', filename=path + '/profile_results.prof')
# 
# 
# 
# stats = pstats.Stats(path + '/profile_results.prof')
# 
# stats.strip_dirs().sort_stats('cumulative').print_stats(30)
# 
# #%%
# if __name__ == '__main__':
#     # run the profiler on the code and save results to a file
#     cProfile.run('prob_non_opt.Assembly_B()', filename=path + '/profile_results.prof')
# 
# 
# 
# stats = pstats.Stats(path + '/profile_results.prof')
# 
# stats.strip_dirs().sort_stats('cumulative').print_stats(30)
# 
# =============================================================================




