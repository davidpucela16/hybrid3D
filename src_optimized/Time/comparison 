#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May  9 13:32:08 2023

@author: pdavid
"""

import os 
path=os.path.dirname(__file__)
os.chdir(path)
path_src=os.path.join(path, '../')
os.chdir(path_src)

import numpy as np

import matplotlib.pyplot as plt
import scipy as sp
import scipy.sparse.linalg
import math

import pdb

import matplotlib.pylab as pylab
plt.style.use('default')
params = {'legend.fontsize': 'x-large',
          'figure.figsize': (10,10),
         'axes.labelsize': 'x-large',
         'axes.titlesize':'x-large',
         'xtick.labelsize':'x-large',
         'ytick.labelsize':'x-large', 
         'font.size': 24,
         'lines.linewidth': 2,
         'lines.markersize': 15}
pylab.rcParams.update(params)

from scipy.sparse.linalg import spsolve as dir_solve
from scipy.sparse.linalg import bicg


from hybrid_set_up_noboundary_optimized import hybrid_set_up as opt

from hybrid_set_up_noboundary import hybrid_set_up as non_opt

from neighbourhood import get_neighbourhood, get_uncommon
from mesh import cart_mesh_3D
from mesh_1D import mesh_1D
from hybrid_set_up_noboundary_optimized import get_interface_kernels_optimized, Assembly_B_arrays_optimized
from scipy.sparse import csc_matrix
from numba.typed import List


#%%

BC_type=np.array(["Neumann", "Neumann", "Neumann","Neumann","Neumann","Neumann"])
BC_type=np.array(["Dirichlet", "Dirichlet","Neumann","Neumann", "Dirichlet","Dirichlet"])
BC_value=np.array([0,0,0,0,0,0])
L_vessel=240
cells_3D=5
n=2
L_3D=np.array([L_vessel, 3*L_vessel, L_vessel])
mesh=cart_mesh_3D(L_3D,cells_3D)

mesh.assemble_boundary_vectors()


# - This is the validation of the 1D transport eq without reaction

D = 1
K=np.array([0.0001,1,0.0001])

U = np.array([2,2,2])/L_vessel
alpha=5
R_vessel=L_vessel/alpha
R_1D=np.zeros(3)+R_vessel

startVertex=np.array([0,1,2])
endVertex=np.array([1,2,3])
pos_vertex=np.array([[L_vessel/2, 0, L_vessel/2],
                     [L_vessel/2, L_vessel,L_vessel/2],
                     [L_vessel/2, 2*L_vessel, L_vessel/2],
                     [L_vessel/2, L_vessel*3,L_vessel/2]
                     ])

vertex_to_edge=[[0],[0,1], [1,2], [2]]
diameters=np.array([2*R_vessel, 2*R_vessel, 2*R_vessel])

cells_per_vessel=10
h=np.zeros(3)+L_vessel/cells_per_vessel

net=mesh_1D(startVertex, endVertex, vertex_to_edge ,pos_vertex, diameters, h,1)
net.U=U
net.D=D
net.pos_arrays(mesh)

from mesh_1D_deprecated import mesh_1D

net_slow=mesh_1D(startVertex, endVertex, vertex_to_edge ,pos_vertex, diameters, h,1)
net_slow.U=U
net_slow.D=D
net_slow.pos_arrays(mesh)

BCs_1D=np.array([[0,1],
                 [3,0]])
mesh.get_ordered_connect_matrix()
nmb_ordered_connect_matrix=List(mesh.ordered_connect_matrix)
prob_opt=opt(mesh, net, BC_type, BC_value,n,1, np.zeros(len(diameters))+K, BCs_1D)
prob_non_opt=non_opt(mesh, net_slow, BC_type, BC_value,n,1, np.zeros(len(diameters))+K, BCs_1D)

#%%
# =============================================================================
# def J_k_m_optimized_helper(ordered_connect_matrix, size_mesh, n,D,
#                                 cells_x, cells_y, cells_z, pos_cells, h_3D, 
#                                 s_blocks, tau, h_1D, pos_s, source_edge, 
#                                 k,m, pos_k, pos_m):
#     sources_k_m, r_k_m, grad_r_k_m, sources_m_k, r_m_k, grad_r_m_k=get_interface_kernels_optimized(k,m,pos_k, pos_m,h_3D, n, cells_x, cells_y, cells_z,
#                                         s_blocks, tau, h_1D, pos_s, source_edge,D)
#     B_data=np.concatenate((-r_k_m-grad_r_k_m/2/h_3D, r_m_k+grad_r_m_k/2/h_3D))
#     print(B_data)
#     B_row=k*np.ones(len(sources_k_m)+len(sources_m_k),dtype=np.int64)
#     B_col=np.concatenate((sources_k_m, sources_m_k))
#     
#     return csc_matrix((B_data*mesh.h, (np.zeros(len(B_col)), B_col)), (1, len(s_blocks)))
# 
# k,m=366,371
# new=get_interface_kernels_optimized(k,m,mesh.pos_cells[k], mesh.pos_cells[m],mesh.h, n, mesh.cells_x, mesh.cells_y, mesh.cells_z,
#                                     net.s_blocks, net.tau, net.h, net.pos_s, net.source_edge,D)
# 
# a,b,c,d=prob_non_opt.get_interface_kernels(k,m)
# 
# 
# 
# reference=prob_non_opt.get_J_k_m(k,m)
# 
# new=J_k_m_optimized_helper(mesh.ordered_connect_matrix, mesh.size_mesh, n,D,
#                                 mesh.cells_x, mesh.cells_y, mesh.cells_z, mesh.pos_cells, mesh.h, 
#                                 net.s_blocks, net.tau, net.h, net.pos_s, net.source_edge,
#                                 k,m, mesh.pos_cells[k], mesh.pos_cells[m])
# =============================================================================

#%%
import pstats
import cProfile
if __name__ == '__main__':
    # run the profiler on the code and save results to a file
    cProfile.run('prob_opt.Assembly_B_optimized()', filename=path + '/profile_results.prof')



stats = pstats.Stats(path + '/profile_results.prof')

stats.strip_dirs().sort_stats('cumulative').print_stats(30)

#%%
if __name__ == '__main__':
    # run the profiler on the code and save results to a file
    cProfile.run('prob_non_opt.Assembly_B()', filename=path + '/profile_results.prof')



stats = pstats.Stats(path + '/profile_results.prof')

stats.strip_dirs().sort_stats('cumulative').print_stats(30)





