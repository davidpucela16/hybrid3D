    def construct_dual_cube(self, coords, bound_status):
        """This function constructs the cube by initiliazing the 8 nodes composing 
        the dual cube.
        The function returns the nodes where each of them will contain as internal variables:
            - The position
            - the local coordinates (WHICH I'M NOT SURE ARE USED AFTEWARDS)
            - Wether it is a boundary or not"""
        k=self.mesh_3D.get_id(coords) #Nearest cartesian node
        
        x_k=self.mesh_3D.get_coords(k)
        #The following vector gives the direction from x_k that the cube has to be constructed
        d=np.array((np.sign(coords-x_k)+1)/2).astype(int) 
        #For each direction d is 0 if against the axis and 1 otherwise
        
        direction=np.array([[1,0],
                            [3,2],
                            [5,4]]) [[0,1,2],[d]][0]
        h_array=np.array([[0,0,self.h],
                    [0,0,-self.h],
                    [0,self.h,0],
                    [0,-self.h,0],
                    [self.h,0,0],
                    [-self.h,0,0]])
        
        h_array[bound_status]/=2
        h_plus=h_array[direction] #the signed distance on each direction for dual cube
        
        #We want an array that which one of the three directions (0, 1 or 2) points to a boundary
        #0 for the z direction, 1 for the y direction, 2 for the x direction
        dir_boundary=np.where(np.abs(h_plus[np.arange(3), np.array([2,1,0])])<self.h-1e-7)[0]
        bound_dir=np.zeros(3, dtype=int)-1
        for i in dir_boundary: #loop through each of the directions where we encounter a boundary 
        #len(dir_boundary)= 0 if no boundary, =1 if boundary, =2 if edge, =3 if corner
            bound_dir[i]=d[i]
            
            
        #Now we have an array that for each direction: -1 if no boundary
                                              #0 if boundary in the negative direction of the axis
                                              #1 if boundary in the positive direction
        #So dir boundary indicates which one of the three axis contains a boundary
        #bound_dir contains the complementary information of the direction where the boundary lies
        nodes=np.array([])
        local_coords=np.array([[0,0,0]])
        
        nodes=np.append(nodes, node(x_k, 0))
        
        nodes=np.append(nodes, node(x_k+h_plus[0], 1))
        nodes[1].bound=np.append(nodes[1].bound, [1,0,-1][bound_dir[0]]) #[1,0,-1]=['south', 'north', 'no_bound']
        
        nodes=np.append(nodes, node(x_k+h_plus[1], 2))
        nodes[2].bound=np.append(nodes[2].bound, [3,2,-1][bound_dir[1]])
        local_coords=np.vstack((local_coords, nodes[2].coords))
        
        nodes=np.append(nodes, node(x_k+h_plus[2], 3))
        nodes[3].bound=np.append(nodes[3].bound, [5,4,-1][bound_dir[2]])
        local_coords=np.vstack((local_coords, nodes[3].coords))
        
        #This ones have to have at least one boundary 
        nodes=np.append(nodes, node(x_k+h_plus[0]+h_plus[1], 4))
        nodes[4].bound=np.append(nodes[1].bound, nodes[2].bound)
        local_coords=np.vstack((local_coords, nodes[4].coords))
        
        nodes=np.append(nodes, node(x_k+h_plus[0]+h_plus[2], 5))
        nodes[5].bound=np.append(nodes[1].bound, nodes[3].bound)
        local_coords=np.vstack((local_coords, nodes[5].coords))

        nodes=np.append(nodes, node(x_k+h_plus[1]+h_plus[2], 6))
        nodes[6].bound=np.append(nodes[2].bound, nodes[3].bound)
        local_coords=np.vstack((local_coords, nodes[6].coords))
        
        nodes=np.append(nodes, node(x_k+h_plus[0]+h_plus[1]+h_plus[2], 7))
        nodes[7].bound=np.concatenate((nodes[1].bound,nodes[2].bound, nodes[3].bound))
        local_coords=np.vstack((local_coords, nodes[7].coords))
        
        return nodes
    
    def get_cube_boundary_slow_values(self, nodes):
        """This function records in each node object the three kernels to multiply 
        the unknowns by to obtain the slow term value at that node.
        At the end of the function, each node has also stored its neighbourhood
        as an internal variable, together with the 3 data kernels and the 3 col kernels
        """
        
        
        direct=np.array([[1,2,3],
                         [0,4,5],
                         [4,0,6],
                         [5,6,0],
                         [2,1,7],
                         [3,7,1],
                         [7,3,0],
                         [6,5,4]])
        
        #This following nodes cannot fall within an edge nor a corner
        cc=0
        for i in nodes[1:4]:
            cc+=1
            i.block_3D=self.mesh_3D.get_id(i.coords)
            i.neigh=get_neighbourhood(self.n, self.mesh_3D.cells_x, 
                                             self.mesh_3D.cells_y, 
                                             self.mesh_3D.cells_z, 
                                             i.block_3D)
            
            #To review these coeffs!!
            i.kernel_s=np.append(i.kernel_s, 1)
            i.col_s=np.append(i.col_s, self.mesh_3D.get_id(i.coords))
            
            if np.sum(i.bound > -1)>0: #Only one can be true
                #normal=(i.coords-nodes[0].coords)/np.linalg.norm(i.coords-nodes[0].coords)
                normal=for_boundary_get_normal(int(i.bound[i.bound > -1]))
                 
                a,b=self.get_values_boundary_nodes(normal, i)
                i.kernel_q=np.concatenate((i.kernel_q, a))
                i.col_q=np.concatenate((i.col_q, b))

            
            
        for i in nodes[4:]: #This ones can have multiple boundaries
            cc+=1
            i.block_3D=self.mesh_3D.get_id(i.coords)
            i.neigh=get_neighbourhood(self.n, self.mesh_3D.cells_x, 
                                             self.mesh_3D.cells_y, 
                                             self.mesh_3D.cells_z, 
                                             i.block_3D)
            
            #To review these coeffs!!
            if np.sum(i.bound > -1)==1: #Only one boundary
                #normal=(i.coords-nodes[0].coords)/np.linalg.norm(i.coords-nodes[0].coords)
                normal=for_boundary_get_normal(int(i.bound[i.bound > -1]))
                 
                one, two, three, four=self.get_values_boundary_nodes(normal, i)
                
                i.kernels_append([one, two, three, four, np.array([]), np.array([])])
                
                
            else: #Multiple boundaries
                i.bound//2 #The neighbourhoods it shares
                for m in i.bound//2:
                    i.kernel_q=np.concatenate((i.kernel_q,nodes[direct[i.ID, m]].kernel_q))
                    i.col_q=np.concatenate((i.col_q,nodes[direct[i.ID, m]].col_q))
                    
                    i.kernels_append([nodes[direct[i.ID, m]].kernel_s, nodes[direct[i.ID, m]].col_s, 
                                      nodes[direct[i.ID, m]].kernel_q, nodes[direct[i.ID, m]].col_q, 
                                      np.array([]), np.array([])])
                    # 
                    
                i.kernel_q/=len(i.bound)
                i.kernel_s/=len(i.bound)
        return nodes
